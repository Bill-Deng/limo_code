# *********************************************************
#
# File autogenerated for the viso_feature_tracking_ros_tool package
# by the rosinterface_handler package.
# Please do not edit.
#
# *********************************************************
import rospy


inf = float('inf')
param_description = [{'constant': False, 'description': 'Sets the verbosity for this node', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': 'verbosity', 'name': 'verbosity', 'min': None, 'default': 'info', 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'std::string'}, {'constant': False, 'description': 'Queuesize for publisher', 'pytype': 'int', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'msg_queue_size', 'min': 1, 'default': 5, 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'int'}, {'constant': True, 'description': 'Constant for enum verbosity', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'verbosity_debug', 'min': None, 'default': 'debug', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': True, 'description': 'Constant for enum verbosity', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'verbosity_info', 'min': None, 'default': 'info', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': True, 'description': 'Constant for enum verbosity', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'verbosity_warning', 'min': None, 'default': 'warning', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': True, 'description': 'Constant for enum verbosity', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'verbosity_error', 'min': None, 'default': 'error', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': True, 'description': 'Constant for enum verbosity', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'verbosity_fatal', 'min': None, 'default': 'fatal', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': False, 'description': 'Topicname for image subscriber', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'subscriber_image', 'min': None, 'default': 'in_topic_image', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': False, 'description': 'Topicname for contour subscriber', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'subscriber_contour', 'min': None, 'default': 'in_topic_contour', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': False, 'description': 'Topicname for publisher', 'pytype': 'str', 'max': None, 'is_vector': False, 'edit_method': '""', 'name': 'publisher_msg_name', 'min': None, 'default': 'out_topic', 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'std::string'}, {'constant': False, 'description': 'scaling factor for images for real_time_performance < 1. means image gets smaller', 'pytype': 'double', 'max': 1.0, 'is_vector': False, 'edit_method': '""', 'name': 'scale_factor', 'min': 0.0, 'default': 1.0, 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'double'}, {'constant': False, 'description': 'mask size of blurring', 'pytype': 'int', 'max': 21, 'is_vector': False, 'edit_method': '""', 'name': 'blur_size', 'min': 1, 'default': 3, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'sigma of blurring', 'pytype': 'double', 'max': 10.0, 'is_vector': False, 'edit_method': '""', 'name': 'blur_sigma', 'min': 1e-05, 'default': 0.8, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'double'}, {'constant': False, 'description': 'non-max-suppression: min. distance between maxima (in pixels)', 'pytype': 'int', 'max': 15, 'is_vector': False, 'edit_method': '""', 'name': 'nms_n', 'min': 1, 'default': 3, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'non-max-suppression: interest point peakiness threshold', 'pytype': 'int', 'max': 500, 'is_vector': False, 'edit_method': '""', 'name': 'nms_tau', 'min': 1, 'default': 50, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'matching bin width/height (affects efficiency only)', 'pytype': 'int', 'max': 1500, 'is_vector': False, 'edit_method': '""', 'name': 'match_binsize', 'min': 1, 'default': 50, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'matching radius (du/dv in pixels)', 'pytype': 'int', 'max': 1500, 'is_vector': False, 'edit_method': '""', 'name': 'match_radius', 'min': 1, 'default': 200, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'dv tolerance for stereo matches (in pixels)', 'pytype': 'int', 'max': 21, 'is_vector': False, 'edit_method': '""', 'name': 'match_disp_tolerance', 'min': 1, 'default': 2, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'outlier removal: flow tolerance (in pixels)', 'pytype': 'int', 'max': 50, 'is_vector': False, 'edit_method': '""', 'name': 'outlier_flow_tolerance', 'min': 1, 'default': 5, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'outlier removal: disparity tolerance (in pixels)', 'pytype': 'int', 'max': 50, 'is_vector': False, 'edit_method': '""', 'name': 'outlier_disp_tolerance', 'min': 1, 'default': 5, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': ' 0=disabled,1=multistage matching (denser and faster)', 'pytype': 'int', 'max': 1, 'is_vector': False, 'edit_method': '""', 'name': 'multi_stage', 'min': 0, 'default': 1, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': ' 0=disabled,1=match at half resolution, refine at full resolution', 'pytype': 'int', 'max': 1, 'is_vector': False, 'edit_method': '""', 'name': 'half_resolution', 'min': 0, 'default': 1, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': ' matching method. Should be quad(2), stereo(1) or flow(0)', 'pytype': 'int', 'max': 2, 'is_vector': False, 'edit_method': '""', 'name': 'method', 'min': 0, 'default': 0, 'level': 0, 'is_map': False, 'configurable': False, 'global_scope': False, 'type': 'int'}, {'constant': False, 'description': 'older detections of one feature than this age are discarded', 'pytype': 'int', 'max': 100, 'is_vector': False, 'edit_method': '""', 'name': 'max_tracklength', 'min': 1, 'default': 10, 'level': 0, 'is_map': False, 'configurable': True, 'global_scope': False, 'type': 'int'}]
subscriber_description = []
publisher_description = []
verbosity_param = "verbosity"
tf_config = None
with_diagnostics = False

if subscriber_description:
    # only import if necessary
    import message_filters
if verbosity_param:
    import logging
if tf_config:
    import tf2_ros


defaults = {}

for param in param_description:
    defaults[param['name']] = param['default']
for subscriber in subscriber_description:
    defaults[subscriber['name']] = None
for publisher in publisher_description:
    defaults[publisher['name']] = None


class FeatureTrackingContourRoiInterface(dict):
    def __init__(self):
        super(self.__class__, self).__init__(defaults)
        self.from_param_server()
        if tf_config:
            self._init_tf()
        if with_diagnostics:
            from diagnostic_updater import Updater
            self["updater"] = Updater()
            self["updater"].setHardwareID("none")

    __getattr__ = dict.__getitem__
    __setattr__ = dict.__setitem__

    def from_param_server(self):
        """
        Reads and initializes parameters, subscribers and publishers with values from parameter server.
        Called automatically at initialization.
        """
        for k, v in self.items():
            config = next((item for item in param_description if item["name"] == k), None)
            if not config:
                continue
            if config['constant']:
                self.test_const_param(k)
                continue
            self[k] = self.get_param(k, config)

        for subscriber in subscriber_description:
            name = subscriber['name']
            topic = self._get_topic(subscriber['scope'], self[subscriber['topic_param']])

            # rescue the callbacks if existing
            if name in self and self[name]:
                callbacks = self[name].callbacks
                self[name].callbacks = {}
            else:
                callbacks = {}
            self[name] = message_filters.Subscriber(topic, self.get_type(subscriber),
                                                    queue_size=self[subscriber['queue_size_param']],
                                                    tcp_nodelay=subscriber['no_delay'])
            self[name].callbacks = callbacks
        for publisher in publisher_description:
            name = publisher['name']
            topic = self._get_topic(publisher['scope'], self[publisher['topic_param']])
            self[name] = rospy.Publisher(topic, self.get_type(publisher),
                                         queue_size=self[publisher['queue_size_param']])
        if verbosity_param:
            logging.getLogger('rosout').setLevel(self._map_verbosity(self[verbosity_param]))

    def to_param_server(self):
        """
        Sets parameters with current values on the parameter server.
        """
        for param_name, param_value in self.iteritems():
            config = next((item for item in param_description if item["name"] == param_name), None)
            if config and not config['constant']:
                full_name = "/" + param_name if config['global_scope'] else "~" + param_name
                rospy.set_param(full_name, param_value)
               
    def from_config(self, config):
        """
        Reads parameter from a dynamic_reconfigure config file.
        Should be called in the callback of dynamic_reconfigure.
        :param config: config object from dynamic reconfigure
        """
        if verbosity_param and verbosity_param in config and config[verbosity_param] != self[verbosity_param]:
            logging.getLogger('rosout').setLevel(self._map_verbosity(config[verbosity_param]))
            rospy.logdebug("Verbosity set to " + config[verbosity_param])
        for subscriber in subscriber_description:
            topic_param = subscriber['topic_param']
            if not topic_param in config:
                continue
            name = subscriber['name']
            queue_param = subscriber['queue_size_param']
            if config[topic_param] != self[topic_param] or config[queue_param] != self[queue_param]:
                callbacks = self[name].callbacks
                self[name].callbacks = {}
                topic = self._get_topic(subscriber['scope'], config[topic_param])
                self[name] = message_filters.Subscriber(topic, self.get_type(subscriber),
                                                        queue_size=config[queue_param],
                                                        tcp_nodelay=subscriber['no_delay'])
                self[name].callbacks = callbacks
        for publisher in publisher_description:
            topic_param = publisher['topic_param']
            if not topic_param in config:
                continue
            name = publisher['name']
            queue_param = publisher['queue_size_param']
            topic = self._get_topic(publisher['scope'], config[topic_param])
            if config[topic_param] != self[topic_param] or config[queue_param] != self[queue_param]:
                self[name] = rospy.Publisher(topic, self.get_type(publisher), queue_size=config[queue_param])
        for k, v in config.iteritems():
            # handle reserved name groups
            if k == "groups":
                continue
            if not k in self:
                raise TypeError("Element {} of config is not part of parameters.".format(k))
            self[k] = v

    def _init_tf(self):
            listener = tf_config["listener_name"]
            buffer = tf_config["buffer_name"]
            broadcaster = tf_config["broadcaster_name"]
            if buffer:
                self[buffer] = tf2_ros.Buffer()
            if listener:
                self[listener] = tf2_ros.TransformListener(self[buffer])
            if broadcaster:
                self[broadcaster] = tf2_ros.TransformBroadcaster

    @staticmethod
    def test_const_param(param_name):
        if rospy.has_param("~" + param_name):
            rospy.logwarn(
                "Parameter {} was set on the parameter server even though it was defined to be constant.".format(
                    param_name))

    @staticmethod
    def get_param(param_name, config):
        def get_type(type_string):
            if type_string == 'std::string':
                return str
            elif type_string == 'int':
                return int
            elif type_string == 'bool':
                return bool
            elif type_string == 'float' or type_string == 'double':
                return float
            else:
                raise ValueError()

        full_name = "/" + param_name if config['global_scope'] else "~" + param_name
        try:
            val = rospy.get_param(full_name)
        except KeyError:
            if config['default'] is None:
                raise KeyError("Parameter {} is neither set on the parameter server nor "
                               "has it a default value".format(param_description))
            rospy.loginfo("Parameter {} is not yet set. Setting default value".format(param_name))
            rospy.set_param(full_name, config['default'])
            val = config['default']

        # test whether type is correct
        try:
            if config['is_vector']:
                val = list(val)
                config_type = config['type']
                val_type = get_type(config_type[config_type.find("<")+1:config_type.find(">")])
                val = [ val_type(v) for v in val ]
            elif config['is_map']:
                val = dict(val)
                config_type = config['type']
                key_type = get_type(config_type[config_type.find("<")+1:config_type.find(",")])
                val_type = get_type(config_type[config_type.find(",")+1:config_type.find(">")])
                val = { key_type(key): val_type(v) for key, v in val.items() }
            else:
                val = get_type(config['type'])(val)
        except ValueError:
            rospy.logerr(
                "Parameter {} is set, but has a different type. Using default value instead.".format(param_name))
            val = config['default']
        # test bounds
        if config['min'] is not None:
            if config['is_vector']:
                if min(val) < config['min']:
                    rospy.logwarn(
                        "Some values in {} for {} are smaller than minimal allowed value. "
                        "Correcting them to min={}".format(val, param_name, config['min']))
                    val = [ v if v > config['min'] else config['min'] for v in val ]
            elif config['is_map']:
                if min(val.values()) < config['min']:
                    rospy.logwarn(
                        "Some values in {} for {} are smaller than minimal allowed value. "
                        "Correcting them to min={}".format(val, param_name, config['min']))
                    val = { k: (v if v > config['min'] else config['min']) for k, v in val.items() }
            elif val < config['min']:
                rospy.logwarn(
                    "Value of {} for {} is smaller than minimal allowed value. "
                    "Correcting value to min={}".format(val, param_name, config['min']))
                val = config['min']

        if config['max'] is not None:
            if config['is_vector']:
                if max(val) > config['max']:
                    rospy.logwarn(
                        "Some values in {} for {} are greater than maximal allowed value. "
                        "Correcting them to max={}".format(val, param_name, config['max']))
                    val = [ v if v < config['max'] else config['max'] for v in val ]
            elif config['is_map']:
                if max(val.values()) > config['max']:
                    rospy.logwarn(
                        "Some values in {} for {} are greater than maximal allowed value. "
                        "Correcting them to max={}".format(val, param_name, config['max']))
                    val = { k: (v if v < config['max'] else config['max']) for k, v in val.items() }
            elif val > config['max']:
                rospy.logwarn(
                    "Value of {} for {} is greater than maximal allowed value. "
                    "Correcting value to max={}".format(val, param_name, config['max']))
                val = config['max']
        return val

    @staticmethod
    def get_type(config):
        for import_cmd in config['import']:
            try:
                return eval(import_cmd + '.' + config['type'].split('::')[-1])
            except:
                pass


    @staticmethod
    def _get_topic(scope, topic):
        if not topic.startswith('/') and scope != 'public':
            return "/" + topic if scope == 'global' else "~" + topic
        return topic

    @staticmethod
    def _map_verbosity(verbosity):
        return {
              'DEBUG':    logging.DEBUG,
              'INFO':     logging.INFO,
              'WARN':     logging.WARN,
              'WARNING':  logging.WARN,
              'ERROR':    logging.ERROR,
              'FATAL':    logging.FATAL,
              }[verbosity.upper()]
