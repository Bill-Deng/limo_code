//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the keyframe_bundle_adjustment_ros_tool package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __keyframe_bundle_adjustment_ros_tool__MONOLIDARCONFIG_H__
#define __keyframe_bundle_adjustment_ros_tool__MONOLIDARCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace keyframe_bundle_adjustment_ros_tool
{
  class MonoLidarConfigStatics;

  class MonoLidarConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(MonoLidarConfig &config, const MonoLidarConfig &max, const MonoLidarConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const MonoLidarConfig &config1, const MonoLidarConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, MonoLidarConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const MonoLidarConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, MonoLidarConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const MonoLidarConfig &config) const = 0;
      virtual void getValue(const MonoLidarConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T MonoLidarConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (MonoLidarConfig::* field);

      virtual void clamp(MonoLidarConfig &config, const MonoLidarConfig &max, const MonoLidarConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const MonoLidarConfig &config1, const MonoLidarConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, MonoLidarConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const MonoLidarConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, MonoLidarConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const MonoLidarConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const MonoLidarConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, MonoLidarConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, MonoLidarConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<MonoLidarConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(MonoLidarConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("verbosity"==(*_i)->name){verbosity = boost::any_cast<std::string>(val);}
        if("prior_vehicle_frame"==(*_i)->name){prior_vehicle_frame = boost::any_cast<std::string>(val);}
        if("prior_global_frame"==(*_i)->name){prior_global_frame = boost::any_cast<std::string>(val);}
        if("tf_waiting_time"==(*_i)->name){tf_waiting_time = boost::any_cast<double>(val);}
        if("calib_target_frame_id"==(*_i)->name){calib_target_frame_id = boost::any_cast<std::string>(val);}
        if("calib_source_frame_id"==(*_i)->name){calib_source_frame_id = boost::any_cast<std::string>(val);}
        if("tf_parent_frame_id"==(*_i)->name){tf_parent_frame_id = boost::any_cast<std::string>(val);}
        if("tf_child_frame_id"==(*_i)->name){tf_child_frame_id = boost::any_cast<std::string>(val);}
        if("max_number_landmarks_near_bin"==(*_i)->name){max_number_landmarks_near_bin = boost::any_cast<int>(val);}
        if("max_number_landmarks_middle_bin"==(*_i)->name){max_number_landmarks_middle_bin = boost::any_cast<int>(val);}
        if("max_number_landmarks_far_bin"==(*_i)->name){max_number_landmarks_far_bin = boost::any_cast<int>(val);}
        if("time_between_keyframes_sec"==(*_i)->name){time_between_keyframes_sec = boost::any_cast<double>(val);}
        if("min_median_flow"==(*_i)->name){min_median_flow = boost::any_cast<double>(val);}
        if("critical_rotation_difference"==(*_i)->name){critical_rotation_difference = boost::any_cast<double>(val);}
        if("robust_loss_depth_thres"==(*_i)->name){robust_loss_depth_thres = boost::any_cast<double>(val);}
        if("robust_loss_reprojection_thres"==(*_i)->name){robust_loss_reprojection_thres = boost::any_cast<double>(val);}
        if("min_number_connecting_landmarks"==(*_i)->name){min_number_connecting_landmarks = boost::any_cast<int>(val);}
        if("max_size_optimization_window"==(*_i)->name){max_size_optimization_window = boost::any_cast<int>(val);}
        if("shrubbery_weight"==(*_i)->name){shrubbery_weight = boost::any_cast<double>(val);}
        if("outlier_rejection_quantile"==(*_i)->name){outlier_rejection_quantile = boost::any_cast<double>(val);}
        if("outlier_rejection_num_iterations"==(*_i)->name){outlier_rejection_num_iterations = boost::any_cast<int>(val);}
        if("height_over_ground"==(*_i)->name){height_over_ground = boost::any_cast<double>(val);}
        if("prior_speed"==(*_i)->name){prior_speed = boost::any_cast<double>(val);}
        if("show_debug_image"==(*_i)->name){show_debug_image = boost::any_cast<bool>(val);}
        if("max_solver_time"==(*_i)->name){max_solver_time = boost::any_cast<double>(val);}
        if("dump_path"==(*_i)->name){dump_path = boost::any_cast<std::string>(val);}
        if("outlier_labels_yaml"==(*_i)->name){outlier_labels_yaml = boost::any_cast<std::string>(val);}
      }
    }

    std::string verbosity;
std::string prior_vehicle_frame;
std::string prior_global_frame;
double tf_waiting_time;
std::string calib_target_frame_id;
std::string calib_source_frame_id;
std::string tf_parent_frame_id;
std::string tf_child_frame_id;
int max_number_landmarks_near_bin;
int max_number_landmarks_middle_bin;
int max_number_landmarks_far_bin;
double time_between_keyframes_sec;
double min_median_flow;
double critical_rotation_difference;
double robust_loss_depth_thres;
double robust_loss_reprojection_thres;
int min_number_connecting_landmarks;
int max_size_optimization_window;
double shrubbery_weight;
double outlier_rejection_quantile;
int outlier_rejection_num_iterations;
double height_over_ground;
double prior_speed;
bool show_debug_image;
double max_solver_time;
std::string dump_path;
std::string outlier_labels_yaml;

    bool state;
    std::string name;

    class PUBLISHER_AND_SUBSCRIBER
{
  public:
    PUBLISHER_AND_SUBSCRIBER()
    {
      state = true;
      name = "Publisher_and_subscriber";
    }

    void setParams(MonoLidarConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("tracklets_subscriber_topic"==(*_i)->name){tracklets_subscriber_topic = boost::any_cast<std::string>(val);}
        if("tracklets_subscriber_queue_size"==(*_i)->name){tracklets_subscriber_queue_size = boost::any_cast<int>(val);}
        if("camera_info_subscriber_topic"==(*_i)->name){camera_info_subscriber_topic = boost::any_cast<std::string>(val);}
        if("camera_info_subscriber_queue_size"==(*_i)->name){camera_info_subscriber_queue_size = boost::any_cast<int>(val);}
        if("active_path_publisher_topic"==(*_i)->name){active_path_publisher_topic = boost::any_cast<std::string>(val);}
        if("active_path_publisher_queue_size"==(*_i)->name){active_path_publisher_queue_size = boost::any_cast<int>(val);}
        if("path_publisher_topic"==(*_i)->name){path_publisher_topic = boost::any_cast<std::string>(val);}
        if("path_publisher_queue_size"==(*_i)->name){path_publisher_queue_size = boost::any_cast<int>(val);}
        if("landmarks_publisher_topic"==(*_i)->name){landmarks_publisher_topic = boost::any_cast<std::string>(val);}
        if("landmarks_publisher_queue_size"==(*_i)->name){landmarks_publisher_queue_size = boost::any_cast<int>(val);}
        if("planes_publisher_topic"==(*_i)->name){planes_publisher_topic = boost::any_cast<std::string>(val);}
        if("planes_publisher_queue_size"==(*_i)->name){planes_publisher_queue_size = boost::any_cast<int>(val);}
      }
    }

    std::string tracklets_subscriber_topic;
int tracklets_subscriber_queue_size;
std::string camera_info_subscriber_topic;
int camera_info_subscriber_queue_size;
std::string active_path_publisher_topic;
int active_path_publisher_queue_size;
std::string path_publisher_topic;
int path_publisher_queue_size;
std::string landmarks_publisher_topic;
int landmarks_publisher_queue_size;
std::string planes_publisher_topic;
int planes_publisher_queue_size;

    bool state;
    std::string name;

    
}publisher_and_subscriber;

}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string verbosity;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string prior_vehicle_frame;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string prior_global_frame;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double tf_waiting_time;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string calib_target_frame_id;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string calib_source_frame_id;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string tf_parent_frame_id;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string tf_child_frame_id;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_number_landmarks_near_bin;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_number_landmarks_middle_bin;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_number_landmarks_far_bin;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double time_between_keyframes_sec;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_median_flow;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double critical_rotation_difference;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double robust_loss_depth_thres;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double robust_loss_reprojection_thres;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_number_connecting_landmarks;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_size_optimization_window;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double shrubbery_weight;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double outlier_rejection_quantile;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int outlier_rejection_num_iterations;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double height_over_ground;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double prior_speed;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool show_debug_image;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_solver_time;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string dump_path;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string outlier_labels_yaml;
//#line 49 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      std::string tracklets_subscriber_topic;
//#line 50 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      int tracklets_subscriber_queue_size;
//#line 51 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      std::string camera_info_subscriber_topic;
//#line 52 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      int camera_info_subscriber_queue_size;
//#line 53 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      std::string active_path_publisher_topic;
//#line 54 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      int active_path_publisher_queue_size;
//#line 55 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      std::string path_publisher_topic;
//#line 56 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      int path_publisher_queue_size;
//#line 57 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      std::string landmarks_publisher_topic;
//#line 58 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      int landmarks_publisher_queue_size;
//#line 59 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      std::string planes_publisher_topic;
//#line 60 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      int planes_publisher_queue_size;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("MonoLidarConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const MonoLidarConfig &__max__ = __getMax__();
      const MonoLidarConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const MonoLidarConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const MonoLidarConfig &__getDefault__();
    static const MonoLidarConfig &__getMax__();
    static const MonoLidarConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const MonoLidarConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void MonoLidarConfig::ParamDescription<std::string>::clamp(MonoLidarConfig &config, const MonoLidarConfig &max, const MonoLidarConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class MonoLidarConfigStatics
  {
    friend class MonoLidarConfig;

    MonoLidarConfigStatics()
    {
MonoLidarConfig::GroupDescription<MonoLidarConfig::DEFAULT, MonoLidarConfig> Default("Default", "", 0, 0, true, &MonoLidarConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.verbosity = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.verbosity = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.verbosity = "info";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("verbosity", "str", 0, "Sets the verbosity for this node", "{'enum_description': 'Sets the verbosity for this node', 'enum': [{'srcline': 15, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'debug', 'ctype': 'std::string', 'type': 'str', 'name': 'debug'}, {'srcline': 16, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'info', 'ctype': 'std::string', 'type': 'str', 'name': 'info'}, {'srcline': 17, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'warning', 'ctype': 'std::string', 'type': 'str', 'name': 'warning'}, {'srcline': 18, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'error', 'ctype': 'std::string', 'type': 'str', 'name': 'error'}, {'srcline': 19, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'fatal', 'ctype': 'std::string', 'type': 'str', 'name': 'fatal'}]}", &MonoLidarConfig::verbosity)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("verbosity", "str", 0, "Sets the verbosity for this node", "{'enum_description': 'Sets the verbosity for this node', 'enum': [{'srcline': 15, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'debug', 'ctype': 'std::string', 'type': 'str', 'name': 'debug'}, {'srcline': 16, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'info', 'ctype': 'std::string', 'type': 'str', 'name': 'info'}, {'srcline': 17, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'warning', 'ctype': 'std::string', 'type': 'str', 'name': 'warning'}, {'srcline': 18, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'error', 'ctype': 'std::string', 'type': 'str', 'name': 'error'}, {'srcline': 19, 'description': '', 'srcfile': '/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg', 'cconsttype': 'const char * const', 'value': 'fatal', 'ctype': 'std::string', 'type': 'str', 'name': 'fatal'}]}", &MonoLidarConfig::verbosity)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.prior_vehicle_frame = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.prior_vehicle_frame = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.prior_vehicle_frame = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("prior_vehicle_frame", "str", 0, "frame id of vehicle from prior(used for tf), if empty, internal prior estimation is used.", "", &MonoLidarConfig::prior_vehicle_frame)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("prior_vehicle_frame", "str", 0, "frame id of vehicle from prior(used for tf), if empty, internal prior estimation is used.", "", &MonoLidarConfig::prior_vehicle_frame)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.prior_global_frame = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.prior_global_frame = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.prior_global_frame = "origin";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("prior_global_frame", "str", 0, "frame id of origin from prior(used for tf)", "", &MonoLidarConfig::prior_global_frame)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("prior_global_frame", "str", 0, "frame id of origin from prior(used for tf)", "", &MonoLidarConfig::prior_global_frame)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tf_waiting_time = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tf_waiting_time = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tf_waiting_time = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("tf_waiting_time", "double", 0, "time in sec that lookup transform from tf wiats before throwing exception", "", &MonoLidarConfig::tf_waiting_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("tf_waiting_time", "double", 0, "time in sec that lookup transform from tf wiats before throwing exception", "", &MonoLidarConfig::tf_waiting_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.calib_target_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.calib_target_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.calib_target_frame_id = "camera";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("calib_target_frame_id", "str", 0, "target frame id of calibration", "", &MonoLidarConfig::calib_target_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("calib_target_frame_id", "str", 0, "target frame id of calibration", "", &MonoLidarConfig::calib_target_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.calib_source_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.calib_source_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.calib_source_frame_id = "vehicle";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("calib_source_frame_id", "str", 0, "source frame id of calibration", "", &MonoLidarConfig::calib_source_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("calib_source_frame_id", "str", 0, "source frame id of calibration", "", &MonoLidarConfig::calib_source_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tf_parent_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tf_parent_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tf_parent_frame_id = "local_cs";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("tf_parent_frame_id", "str", 0, "parent frame id for tf publishing if empty nothing is published; format: tf2 convention (without / at beginning)", "", &MonoLidarConfig::tf_parent_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("tf_parent_frame_id", "str", 0, "parent frame id for tf publishing if empty nothing is published; format: tf2 convention (without / at beginning)", "", &MonoLidarConfig::tf_parent_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tf_child_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tf_child_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tf_child_frame_id = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("tf_child_frame_id", "str", 0, "child frame id for tf publishing if empty nothing is published; format: tf2 convention (without / at beginning)", "", &MonoLidarConfig::tf_child_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("tf_child_frame_id", "str", 0, "child frame id for tf publishing if empty nothing is published; format: tf2 convention (without / at beginning)", "", &MonoLidarConfig::tf_child_frame_id)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_number_landmarks_near_bin = 10;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_number_landmarks_near_bin = 5000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_number_landmarks_near_bin = 300;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_number_landmarks_near_bin", "int", 0, "number of landmarks in near bin by observation delta angle", "", &MonoLidarConfig::max_number_landmarks_near_bin)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_number_landmarks_near_bin", "int", 0, "number of landmarks in near bin by observation delta angle", "", &MonoLidarConfig::max_number_landmarks_near_bin)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_number_landmarks_middle_bin = 10;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_number_landmarks_middle_bin = 5000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_number_landmarks_middle_bin = 300;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_number_landmarks_middle_bin", "int", 0, "number of landmarks in middle bin chosen randomly", "", &MonoLidarConfig::max_number_landmarks_middle_bin)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_number_landmarks_middle_bin", "int", 0, "number of landmarks in middle bin chosen randomly", "", &MonoLidarConfig::max_number_landmarks_middle_bin)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_number_landmarks_far_bin = 10;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_number_landmarks_far_bin = 5000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_number_landmarks_far_bin = 300;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_number_landmarks_far_bin", "int", 0, "number of landmarks in far bin by tracklength", "", &MonoLidarConfig::max_number_landmarks_far_bin)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_number_landmarks_far_bin", "int", 0, "number of landmarks in far bin by tracklength", "", &MonoLidarConfig::max_number_landmarks_far_bin)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.time_between_keyframes_sec = 0.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.time_between_keyframes_sec = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.time_between_keyframes_sec = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("time_between_keyframes_sec", "double", 0, "time in seconds between the keyframes", "", &MonoLidarConfig::time_between_keyframes_sec)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("time_between_keyframes_sec", "double", 0, "time in seconds between the keyframes", "", &MonoLidarConfig::time_between_keyframes_sec)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_median_flow = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_median_flow = 200.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_median_flow = 8.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("min_median_flow", "double", 0, "minimum median flow so that frame is accepted as keyframe, especially important for standstill", "", &MonoLidarConfig::min_median_flow)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("min_median_flow", "double", 0, "minimum median flow so that frame is accepted as keyframe, especially important for standstill", "", &MonoLidarConfig::min_median_flow)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.critical_rotation_difference = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.critical_rotation_difference = 1.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.critical_rotation_difference = 0.08;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("critical_rotation_difference", "double", 0, "if rotation between last frame and that is bigger keyframe is selected, important for curves", "", &MonoLidarConfig::critical_rotation_difference)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("critical_rotation_difference", "double", 0, "if rotation between last frame and that is bigger keyframe is selected, important for curves", "", &MonoLidarConfig::critical_rotation_difference)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.robust_loss_depth_thres = 0.0001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.robust_loss_depth_thres = 5.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.robust_loss_depth_thres = 0.15;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("robust_loss_depth_thres", "double", 0, "threshold in meters for robustifier(cauchy loss) for depth diff, from this threshold on measurements are considered as outlier", "", &MonoLidarConfig::robust_loss_depth_thres)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("robust_loss_depth_thres", "double", 0, "threshold in meters for robustifier(cauchy loss) for depth diff, from this threshold on measurements are considered as outlier", "", &MonoLidarConfig::robust_loss_depth_thres)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.robust_loss_reprojection_thres = 0.0001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.robust_loss_reprojection_thres = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.robust_loss_reprojection_thres = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("robust_loss_reprojection_thres", "double", 0, "threshold in pixels for robustifier(huber loss) for reprojection diff, from this threshold on measurements are considered as outlier", "", &MonoLidarConfig::robust_loss_reprojection_thres)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("robust_loss_reprojection_thres", "double", 0, "threshold in pixels for robustifier(huber loss) for reprojection diff, from this threshold on measurements are considered as outlier", "", &MonoLidarConfig::robust_loss_reprojection_thres)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_number_connecting_landmarks = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_number_connecting_landmarks = 500;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_number_connecting_landmarks = 30;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("min_number_connecting_landmarks", "int", 0, "if number of tracklets that connect first to current frame is smaller than this, we set the end of the optimization window", "", &MonoLidarConfig::min_number_connecting_landmarks)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("min_number_connecting_landmarks", "int", 0, "if number of tracklets that connect first to current frame is smaller than this, we set the end of the optimization window", "", &MonoLidarConfig::min_number_connecting_landmarks)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_size_optimization_window = 3;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_size_optimization_window = 500;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_size_optimization_window = 20;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_size_optimization_window", "int", 0, "maximum number of keyframes in optimization window.", "", &MonoLidarConfig::max_size_optimization_window)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("max_size_optimization_window", "int", 0, "maximum number of keyframes in optimization window.", "", &MonoLidarConfig::max_size_optimization_window)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.shrubbery_weight = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.shrubbery_weight = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.shrubbery_weight = 0.9;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("shrubbery_weight", "double", 0, "Weight assigned to landmarks with label that belongs to vegetation, sky, terrain, ...", "", &MonoLidarConfig::shrubbery_weight)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("shrubbery_weight", "double", 0, "Weight assigned to landmarks with label that belongs to vegetation, sky, terrain, ...", "", &MonoLidarConfig::shrubbery_weight)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.outlier_rejection_quantile = 0.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.outlier_rejection_quantile = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.outlier_rejection_quantile = 0.95;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("outlier_rejection_quantile", "double", 0, "we solve the problem n times with n num_iterations and reject the (1-quantile)*100% most downweighted residuals", "", &MonoLidarConfig::outlier_rejection_quantile)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("outlier_rejection_quantile", "double", 0, "we solve the problem n times with n num_iterations and reject the (1-quantile)*100% most downweighted residuals", "", &MonoLidarConfig::outlier_rejection_quantile)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.outlier_rejection_num_iterations = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.outlier_rejection_num_iterations = 10;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.outlier_rejection_num_iterations = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("outlier_rejection_num_iterations", "int", 0, "we solve the problem n times with n num_iterations and reject the (1-quantile)*100% most downweighted residuals", "", &MonoLidarConfig::outlier_rejection_num_iterations)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("outlier_rejection_num_iterations", "int", 0, "we solve the problem n times with n num_iterations and reject the (1-quantile)*100% most downweighted residuals", "", &MonoLidarConfig::outlier_rejection_num_iterations)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.height_over_ground = -10.0001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.height_over_ground = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.height_over_ground = 0.3;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("height_over_ground", "double", 0, "height over ground from vehicle coordinate system, value<-10. means no gp will be added to problem.", "", &MonoLidarConfig::height_over_ground)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("height_over_ground", "double", 0, "height over ground from vehicle coordinate system, value<-10. means no gp will be added to problem.", "", &MonoLidarConfig::height_over_ground)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.prior_speed = 0.001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.prior_speed = 30.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.prior_speed = 4.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("prior_speed", "double", 0, "Speed of vehicle in meter per second at beginning, when plane can not be estimated yet. Only used if not external prior given.  ", "", &MonoLidarConfig::prior_speed)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("prior_speed", "double", 0, "Speed of vehicle in meter per second at beginning, when plane can not be estimated yet. Only used if not external prior given.  ", "", &MonoLidarConfig::prior_speed)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.show_debug_image = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.show_debug_image = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.show_debug_image = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<bool>("show_debug_image", "bool", 0, "if true show measurements on keyframes in debug image", "", &MonoLidarConfig::show_debug_image)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<bool>("show_debug_image", "bool", 0, "if true show measurements on keyframes in debug image", "", &MonoLidarConfig::show_debug_image)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_solver_time = 0.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_solver_time = 20.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_solver_time = 0.2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("max_solver_time", "double", 0, "maximum solver time in seconds, use that to make it real time", "", &MonoLidarConfig::max_solver_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<double>("max_solver_time", "double", 0, "maximum solver time in seconds, use that to make it real time", "", &MonoLidarConfig::max_solver_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.dump_path = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.dump_path = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.dump_path = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("dump_path", "str", 0, "path to dump file", "", &MonoLidarConfig::dump_path)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("dump_path", "str", 0, "path to dump file", "", &MonoLidarConfig::dump_path)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.outlier_labels_yaml = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.outlier_labels_yaml = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.outlier_labels_yaml = "../res/outlier_labels.yaml";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("outlier_labels_yaml", "str", 0, "path to file for outlier labels", "", &MonoLidarConfig::outlier_labels_yaml)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("outlier_labels_yaml", "str", 0, "path to file for outlier labels", "", &MonoLidarConfig::outlier_labels_yaml)));
MonoLidarConfig::GroupDescription<MonoLidarConfig::DEFAULT::PUBLISHER_AND_SUBSCRIBER, MonoLidarConfig::DEFAULT> Publisher_and_subscriber("Publisher_and_subscriber", "", 0, 1, true, &MonoLidarConfig::DEFAULT::publisher_and_subscriber);
//#line 49 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.tracklets_subscriber_topic = "";
//#line 49 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.tracklets_subscriber_topic = "";
//#line 49 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.tracklets_subscriber_topic = "in_topic_tracklets";
//#line 49 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("tracklets_subscriber_topic", "str", 0, "Topic for tracklets with depth and outlier flags", "", &MonoLidarConfig::tracklets_subscriber_topic)));
//#line 49 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("tracklets_subscriber_topic", "str", 0, "Topic for tracklets with depth and outlier flags", "", &MonoLidarConfig::tracklets_subscriber_topic)));
//#line 50 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.tracklets_subscriber_queue_size = 0;
//#line 50 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.tracklets_subscriber_queue_size = 2147483647;
//#line 50 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.tracklets_subscriber_queue_size = 5;
//#line 50 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("tracklets_subscriber_queue_size", "int", 0, "Queue size for tracklets with depth and outlier flags", "", &MonoLidarConfig::tracklets_subscriber_queue_size)));
//#line 50 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("tracklets_subscriber_queue_size", "int", 0, "Queue size for tracklets with depth and outlier flags", "", &MonoLidarConfig::tracklets_subscriber_queue_size)));
//#line 51 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.camera_info_subscriber_topic = "";
//#line 51 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.camera_info_subscriber_topic = "";
//#line 51 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.camera_info_subscriber_topic = "in_topic_cam_info";
//#line 51 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("camera_info_subscriber_topic", "str", 0, "Topic for camera info for intrinsics", "", &MonoLidarConfig::camera_info_subscriber_topic)));
//#line 51 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("camera_info_subscriber_topic", "str", 0, "Topic for camera info for intrinsics", "", &MonoLidarConfig::camera_info_subscriber_topic)));
//#line 52 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.camera_info_subscriber_queue_size = 0;
//#line 52 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.camera_info_subscriber_queue_size = 2147483647;
//#line 52 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.camera_info_subscriber_queue_size = 5;
//#line 52 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("camera_info_subscriber_queue_size", "int", 0, "Queue size for camera info for intrinsics", "", &MonoLidarConfig::camera_info_subscriber_queue_size)));
//#line 52 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("camera_info_subscriber_queue_size", "int", 0, "Queue size for camera info for intrinsics", "", &MonoLidarConfig::camera_info_subscriber_queue_size)));
//#line 53 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.active_path_publisher_topic = "";
//#line 53 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.active_path_publisher_topic = "";
//#line 53 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.active_path_publisher_topic = "active_path_topic";
//#line 53 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("active_path_publisher_topic", "str", 0, "Topic for publish path that is actively optimized in bundle adjustment for plotting", "", &MonoLidarConfig::active_path_publisher_topic)));
//#line 53 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("active_path_publisher_topic", "str", 0, "Topic for publish path that is actively optimized in bundle adjustment for plotting", "", &MonoLidarConfig::active_path_publisher_topic)));
//#line 54 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.active_path_publisher_queue_size = 0;
//#line 54 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.active_path_publisher_queue_size = 2147483647;
//#line 54 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.active_path_publisher_queue_size = 5;
//#line 54 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("active_path_publisher_queue_size", "int", 0, "Queue size for publish path that is actively optimized in bundle adjustment for plotting", "", &MonoLidarConfig::active_path_publisher_queue_size)));
//#line 54 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("active_path_publisher_queue_size", "int", 0, "Queue size for publish path that is actively optimized in bundle adjustment for plotting", "", &MonoLidarConfig::active_path_publisher_queue_size)));
//#line 55 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.path_publisher_topic = "";
//#line 55 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.path_publisher_topic = "";
//#line 55 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.path_publisher_topic = "path_topic";
//#line 55 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("path_publisher_topic", "str", 0, "Topic for publish whole path for plotting", "", &MonoLidarConfig::path_publisher_topic)));
//#line 55 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("path_publisher_topic", "str", 0, "Topic for publish whole path for plotting", "", &MonoLidarConfig::path_publisher_topic)));
//#line 56 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.path_publisher_queue_size = 0;
//#line 56 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.path_publisher_queue_size = 2147483647;
//#line 56 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.path_publisher_queue_size = 5;
//#line 56 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("path_publisher_queue_size", "int", 0, "Queue size for publish whole path for plotting", "", &MonoLidarConfig::path_publisher_queue_size)));
//#line 56 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("path_publisher_queue_size", "int", 0, "Queue size for publish whole path for plotting", "", &MonoLidarConfig::path_publisher_queue_size)));
//#line 57 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.landmarks_publisher_topic = "";
//#line 57 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.landmarks_publisher_topic = "";
//#line 57 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.landmarks_publisher_topic = "landmarks_topic";
//#line 57 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("landmarks_publisher_topic", "str", 0, "Topic for publish landmarks in global frame", "", &MonoLidarConfig::landmarks_publisher_topic)));
//#line 57 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("landmarks_publisher_topic", "str", 0, "Topic for publish landmarks in global frame", "", &MonoLidarConfig::landmarks_publisher_topic)));
//#line 58 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.landmarks_publisher_queue_size = 0;
//#line 58 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.landmarks_publisher_queue_size = 2147483647;
//#line 58 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.landmarks_publisher_queue_size = 5;
//#line 58 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("landmarks_publisher_queue_size", "int", 0, "Queue size for publish landmarks in global frame", "", &MonoLidarConfig::landmarks_publisher_queue_size)));
//#line 58 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("landmarks_publisher_queue_size", "int", 0, "Queue size for publish landmarks in global frame", "", &MonoLidarConfig::landmarks_publisher_queue_size)));
//#line 59 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.planes_publisher_topic = "";
//#line 59 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.planes_publisher_topic = "";
//#line 59 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.planes_publisher_topic = "planes_topic";
//#line 59 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("planes_publisher_topic", "str", 0, "Topic for publish estiamted local planes in global frame", "", &MonoLidarConfig::planes_publisher_topic)));
//#line 59 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<std::string>("planes_publisher_topic", "str", 0, "Topic for publish estiamted local planes in global frame", "", &MonoLidarConfig::planes_publisher_topic)));
//#line 60 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __min__.planes_publisher_queue_size = 0;
//#line 60 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __max__.planes_publisher_queue_size = 2147483647;
//#line 60 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __default__.planes_publisher_queue_size = 5;
//#line 60 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      Publisher_and_subscriber.abstract_parameters.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("planes_publisher_queue_size", "int", 0, "Queue size for publish estiamted local planes in global frame", "", &MonoLidarConfig::planes_publisher_queue_size)));
//#line 60 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      __param_descriptions__.push_back(MonoLidarConfig::AbstractParamDescriptionConstPtr(new MonoLidarConfig::ParamDescription<int>("planes_publisher_queue_size", "int", 0, "Queue size for publish estiamted local planes in global frame", "", &MonoLidarConfig::planes_publisher_queue_size)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Publisher_and_subscriber.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(MonoLidarConfig::AbstractGroupDescriptionConstPtr(new MonoLidarConfig::GroupDescription<MonoLidarConfig::DEFAULT::PUBLISHER_AND_SUBSCRIBER, MonoLidarConfig::DEFAULT>(Publisher_and_subscriber)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(MonoLidarConfig::AbstractGroupDescriptionConstPtr(new MonoLidarConfig::GroupDescription<MonoLidarConfig::DEFAULT::PUBLISHER_AND_SUBSCRIBER, MonoLidarConfig::DEFAULT>(Publisher_and_subscriber)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(MonoLidarConfig::AbstractGroupDescriptionConstPtr(new MonoLidarConfig::GroupDescription<MonoLidarConfig::DEFAULT, MonoLidarConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<MonoLidarConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<MonoLidarConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<MonoLidarConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    MonoLidarConfig __max__;
    MonoLidarConfig __min__;
    MonoLidarConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const MonoLidarConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static MonoLidarConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &MonoLidarConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const MonoLidarConfig &MonoLidarConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const MonoLidarConfig &MonoLidarConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const MonoLidarConfig &MonoLidarConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<MonoLidarConfig::AbstractParamDescriptionConstPtr> &MonoLidarConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<MonoLidarConfig::AbstractGroupDescriptionConstPtr> &MonoLidarConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const MonoLidarConfigStatics *MonoLidarConfig::__get_statics__()
  {
    const static MonoLidarConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = MonoLidarConfigStatics::get_instance();

    return statics;
  }

//#line 15 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      const char * const MonoLidar_debug = "debug";
//#line 16 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      const char * const MonoLidar_info = "info";
//#line 17 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      const char * const MonoLidar_warning = "warning";
//#line 18 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      const char * const MonoLidar_error = "error";
//#line 19 "/home/dlx/catkin_limo_workspace/devel/share/keyframe_bundle_adjustment_ros_tool/cfg/MonoLidar.cfg"
      const char * const MonoLidar_fatal = "fatal";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __MONOLIDARRECONFIGURATOR_H__
