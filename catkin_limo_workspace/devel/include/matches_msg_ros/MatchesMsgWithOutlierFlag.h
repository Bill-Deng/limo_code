// Generated by gencpp from file matches_msg_ros/MatchesMsgWithOutlierFlag.msg
// DO NOT EDIT!


#ifndef MATCHES_MSG_ROS_MESSAGE_MATCHESMSGWITHOUTLIERFLAG_H
#define MATCHES_MSG_ROS_MESSAGE_MATCHESMSGWITHOUTLIERFLAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <matches_msg_ros/TrackletWithOutlierFlag.h>

namespace matches_msg_ros
{
template <class ContainerAllocator>
struct MatchesMsgWithOutlierFlag_
{
  typedef MatchesMsgWithOutlierFlag_<ContainerAllocator> Type;

  MatchesMsgWithOutlierFlag_()
    : header()
    , tracks()
    , stamps()  {
    }
  MatchesMsgWithOutlierFlag_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tracks(_alloc)
    , stamps(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::matches_msg_ros::TrackletWithOutlierFlag_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::matches_msg_ros::TrackletWithOutlierFlag_<ContainerAllocator> >::other >  _tracks_type;
  _tracks_type tracks;

   typedef std::vector<ros::Time, typename ContainerAllocator::template rebind<ros::Time>::other >  _stamps_type;
  _stamps_type stamps;





  typedef boost::shared_ptr< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> const> ConstPtr;

}; // struct MatchesMsgWithOutlierFlag_

typedef ::matches_msg_ros::MatchesMsgWithOutlierFlag_<std::allocator<void> > MatchesMsgWithOutlierFlag;

typedef boost::shared_ptr< ::matches_msg_ros::MatchesMsgWithOutlierFlag > MatchesMsgWithOutlierFlagPtr;
typedef boost::shared_ptr< ::matches_msg_ros::MatchesMsgWithOutlierFlag const> MatchesMsgWithOutlierFlagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace matches_msg_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'matches_msg_ros': ['/home/dlx/catkin_limo_workspace/src/feature_tracking/matches_msg_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ebd216679e7bafc403d47a2f741b116";
  }

  static const char* value(const ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ebd216679e7bafcULL;
  static const uint64_t static_value2 = 0x403d47a2f741b116ULL;
};

template<class ContainerAllocator>
struct DataType< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "matches_msg_ros/MatchesMsgWithOutlierFlag";
  }

  static const char* value(const ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Separate header for compatibility with current TimeSynchronizer.\n"
"std_msgs/Header header\n"
"\n"
"# Data field Tracklet, with flag if is inlier or not\n"
"TrackletWithOutlierFlag[] tracks\n"
"\n"
"# save timestamps corresponding to each match:\n"
"# to get stamp corresponding to match number i in tracklet take timestamp i in stamps\n"
"# stamps size is equal to the size of the longest tracklet\n"
"time[] stamps\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: matches_msg_ros/TrackletWithOutlierFlag\n"
"\n"
"# no header since shall not be transmitted individually\n"
"# Data field Tracklet\n"
"FeaturePoint[] feature_points\n"
"\n"
"# flag if this tracklet is an outlier or not, default is false\n"
"bool is_outlier\n"
"\n"
"# field for saving error, f.e. loss from optimization, the higher the value the higher the probability that it is an outlier, typically this is a relative value to the other errors\n"
"float32 error\n"
"\n"
"# id given by tracker\n"
"uint64 id\n"
"\n"
"# age of the tracklet\n"
"uint16 age\n"
"\n"
"# label for the tracklet, LUT has to be provided by the user\n"
"int16 label\n"
"\n"
"================================================================================\n"
"MSG: matches_msg_ros/FeaturePoint\n"
"# no header because shall not be send alone\n"
"# Data field Matches (as tracklets, el.first == u el.second == v)\n"
"float32 u\n"
"float32 v\n"
;
  }

  static const char* value(const ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tracks);
      stream.next(m.stamps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MatchesMsgWithOutlierFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::matches_msg_ros::MatchesMsgWithOutlierFlag_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tracks[]" << std::endl;
    for (size_t i = 0; i < v.tracks.size(); ++i)
    {
      s << indent << "  tracks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::matches_msg_ros::TrackletWithOutlierFlag_<ContainerAllocator> >::stream(s, indent + "    ", v.tracks[i]);
    }
    s << indent << "stamps[]" << std::endl;
    for (size_t i = 0; i < v.stamps.size(); ++i)
    {
      s << indent << "  stamps[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.stamps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MATCHES_MSG_ROS_MESSAGE_MATCHESMSGWITHOUTLIERFLAG_H
