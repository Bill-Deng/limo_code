// Generated by gencpp from file matches_msg_depth_ros/TrackletWithInlierFlag.msg
// DO NOT EDIT!


#ifndef MATCHES_MSG_DEPTH_ROS_MESSAGE_TRACKLETWITHINLIERFLAG_H
#define MATCHES_MSG_DEPTH_ROS_MESSAGE_TRACKLETWITHINLIERFLAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <matches_msg_depth_ros/FeaturePoint.h>

namespace matches_msg_depth_ros
{
template <class ContainerAllocator>
struct TrackletWithInlierFlag_
{
  typedef TrackletWithInlierFlag_<ContainerAllocator> Type;

  TrackletWithInlierFlag_()
    : feature_points()
    , is_inlier(false)
    , id(0)
    , age(0)  {
    }
  TrackletWithInlierFlag_(const ContainerAllocator& _alloc)
    : feature_points(_alloc)
    , is_inlier(false)
    , id(0)
    , age(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::matches_msg_depth_ros::FeaturePoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::matches_msg_depth_ros::FeaturePoint_<ContainerAllocator> >::other >  _feature_points_type;
  _feature_points_type feature_points;

   typedef uint8_t _is_inlier_type;
  _is_inlier_type is_inlier;

   typedef uint64_t _id_type;
  _id_type id;

   typedef uint16_t _age_type;
  _age_type age;





  typedef boost::shared_ptr< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> const> ConstPtr;

}; // struct TrackletWithInlierFlag_

typedef ::matches_msg_depth_ros::TrackletWithInlierFlag_<std::allocator<void> > TrackletWithInlierFlag;

typedef boost::shared_ptr< ::matches_msg_depth_ros::TrackletWithInlierFlag > TrackletWithInlierFlagPtr;
typedef boost::shared_ptr< ::matches_msg_depth_ros::TrackletWithInlierFlag const> TrackletWithInlierFlagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace matches_msg_depth_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'matches_msg_depth_ros': ['/home/dlx/catkin_limo_workspace/src/mono_lidar_depth/matches_msg_depth_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62a473d680d0e5ab1ca821370e02c176";
  }

  static const char* value(const ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62a473d680d0e5abULL;
  static const uint64_t static_value2 = 0x1ca821370e02c176ULL;
};

template<class ContainerAllocator>
struct DataType< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "matches_msg_depth_ros/TrackletWithInlierFlag";
  }

  static const char* value(const ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# no header since shall not be transmitted individually\n"
"# Data field Tracklet\n"
"FeaturePoint[] feature_points\n"
"\n"
"bool is_inlier\n"
"\n"
"# id given by tracker\n"
"uint64 id\n"
"uint16 age\n"
"\n"
"================================================================================\n"
"MSG: matches_msg_depth_ros/FeaturePoint\n"
"# no header because shall not be send alone\n"
"# Data field Matches with depth d in m, negative value means no depth was estimated\n"
"float32 u\n"
"float32 v\n"
"float32 d\n"
;
  }

  static const char* value(const ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feature_points);
      stream.next(m.is_inlier);
      stream.next(m.id);
      stream.next(m.age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackletWithInlierFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::matches_msg_depth_ros::TrackletWithInlierFlag_<ContainerAllocator>& v)
  {
    s << indent << "feature_points[]" << std::endl;
    for (size_t i = 0; i < v.feature_points.size(); ++i)
    {
      s << indent << "  feature_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::matches_msg_depth_ros::FeaturePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.feature_points[i]);
    }
    s << indent << "is_inlier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_inlier);
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MATCHES_MSG_DEPTH_ROS_MESSAGE_TRACKLETWITHINLIERFLAG_H
