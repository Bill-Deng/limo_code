#!/usr/bin/env python
# *********************************************************
#
# File autogenerated for the keyframe_bundle_adjustment_ros_tool package
# by the rosinterface_handler package.
# Please do not edit.
#
# ********************************************************/

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

verbosity = gen.enum([
    gen.const(name='debug', type='str', value='debug', descr=''),
    gen.const(name='info', type='str', value='info', descr=''),
    gen.const(name='warning', type='str', value='warning', descr=''),
    gen.const(name='error', type='str', value='error', descr=''),
    gen.const(name='fatal', type='str', value='fatal', descr=''),
    ], 'Sets the verbosity for this node')
gen.add(name = 'verbosity', paramtype = 'str', level = 0, description = 'Sets the verbosity for this node', edit_method=verbosity, default="info")
gen.add(name = 'prior_vehicle_frame', paramtype = 'str', level = 0, description = 'frame id of vehicle from prior(used for tf), if empty, internal prior estimation is used.', edit_method="", default="")
gen.add(name = 'prior_global_frame', paramtype = 'str', level = 0, description = 'frame id of origin from prior(used for tf)', edit_method="", default="origin")
gen.add(name = 'tf_waiting_time', paramtype = 'double', level = 0, description = 'time in sec that lookup transform from tf wiats before throwing exception', edit_method="", default=10.0)
gen.add(name = 'calib_target_frame_id', paramtype = 'str', level = 0, description = 'target frame id of calibration', edit_method="", default="camera")
gen.add(name = 'calib_source_frame_id', paramtype = 'str', level = 0, description = 'source frame id of calibration', edit_method="", default="vehicle")
gen.add(name = 'tf_parent_frame_id', paramtype = 'str', level = 0, description = 'parent frame id for tf publishing if empty nothing is published; format: tf2 convention (without / at beginning)', edit_method="", default="local_cs")
gen.add(name = 'tf_child_frame_id', paramtype = 'str', level = 0, description = 'child frame id for tf publishing if empty nothing is published; format: tf2 convention (without / at beginning)', edit_method="", default="")
gen.add(name = 'max_number_landmarks_near_bin', paramtype = 'int', level = 0, description = 'number of landmarks in near bin by observation delta angle', edit_method="", default=300, min=10, max=5000)
gen.add(name = 'max_number_landmarks_middle_bin', paramtype = 'int', level = 0, description = 'number of landmarks in middle bin chosen randomly', edit_method="", default=300, min=10, max=5000)
gen.add(name = 'max_number_landmarks_far_bin', paramtype = 'int', level = 0, description = 'number of landmarks in far bin by tracklength', edit_method="", default=300, min=10, max=5000)
gen.add(name = 'time_between_keyframes_sec', paramtype = 'double', level = 0, description = 'time in seconds between the keyframes', edit_method="", default=0.1, min=0.01, max=1.0)
gen.add(name = 'min_median_flow', paramtype = 'double', level = 0, description = 'minimum median flow so that frame is accepted as keyframe, especially important for standstill', edit_method="", default=8., min=0., max=200.)
gen.add(name = 'critical_rotation_difference', paramtype = 'double', level = 0, description = 'if rotation between last frame and that is bigger keyframe is selected, important for curves', edit_method="", default=0.08, min=0., max=1.5)
gen.add(name = 'robust_loss_depth_thres', paramtype = 'double', level = 0, description = 'threshold in meters for robustifier(cauchy loss) for depth diff, from this threshold on measurements are considered as outlier', edit_method="", default=0.15, min=0.0001, max=5.0)
gen.add(name = 'robust_loss_reprojection_thres', paramtype = 'double', level = 0, description = 'threshold in pixels for robustifier(huber loss) for reprojection diff, from this threshold on measurements are considered as outlier', edit_method="", default=1.0, min=0.0001, max=10.)
gen.add(name = 'min_number_connecting_landmarks', paramtype = 'int', level = 0, description = 'if number of tracklets that connect first to current frame is smaller than this, we set the end of the optimization window', edit_method="", default=30, min=5, max=500)
gen.add(name = 'max_size_optimization_window', paramtype = 'int', level = 0, description = 'maximum number of keyframes in optimization window.', edit_method="", default=20, min=3, max=500)
gen.add(name = 'shrubbery_weight', paramtype = 'double', level = 0, description = 'Weight assigned to landmarks with label that belongs to vegetation, sky, terrain, ...', edit_method="", default=0.9, min=0., max=1.)
gen.add(name = 'outlier_rejection_quantile', paramtype = 'double', level = 0, description = 'we solve the problem n times with n num_iterations and reject the (1-quantile)*100% most downweighted residuals', edit_method="", default=0.95, min=0.01, max=1.0)
gen.add(name = 'outlier_rejection_num_iterations', paramtype = 'int', level = 0, description = 'we solve the problem n times with n num_iterations and reject the (1-quantile)*100% most downweighted residuals', edit_method="", default=1, min=0, max=10)
gen.add(name = 'height_over_ground', paramtype = 'double', level = 0, description = 'height over ground from vehicle coordinate system, value<-10. means no gp will be added to problem.', edit_method="", default=0.30, min=-10.0001, max=10)
gen.add(name = 'prior_speed', paramtype = 'double', level = 0, description = 'Speed of vehicle in meter per second at beginning, when plane can not be estimated yet. Only used if not external prior given.  ', edit_method="", default=4., min=0.001, max=30.)
gen.add(name = 'show_debug_image', paramtype = 'bool', level = 0, description = 'if true show measurements on keyframes in debug image', edit_method="", default=False)
gen.add(name = 'max_solver_time', paramtype = 'double', level = 0, description = 'maximum solver time in seconds, use that to make it real time', edit_method="", default=0.2, min=0.01, max=20.0)
gen.add(name = 'dump_path', paramtype = 'str', level = 0, description = 'path to dump file', edit_method="", default="")
gen.add(name = 'outlier_labels_yaml', paramtype = 'str', level = 0, description = 'path to file for outlier labels', edit_method="", default="../res/outlier_labels.yaml")
Publisherandsubscriber = gen.add_group('Publisher and subscriber')
Publisherandsubscriber.add(name = 'tracklets_subscriber_topic', paramtype = 'str', level = 0, description = 'Topic for tracklets with depth and outlier flags', edit_method="", default="in_topic_tracklets")
Publisherandsubscriber.add(name = 'tracklets_subscriber_queue_size', paramtype = 'int', level = 0, description = 'Queue size for tracklets with depth and outlier flags', edit_method="", default=5, min=0)
Publisherandsubscriber.add(name = 'camera_info_subscriber_topic', paramtype = 'str', level = 0, description = 'Topic for camera info for intrinsics', edit_method="", default="in_topic_cam_info")
Publisherandsubscriber.add(name = 'camera_info_subscriber_queue_size', paramtype = 'int', level = 0, description = 'Queue size for camera info for intrinsics', edit_method="", default=5, min=0)
Publisherandsubscriber.add(name = 'active_path_publisher_topic', paramtype = 'str', level = 0, description = 'Topic for publish path that is actively optimized in bundle adjustment for plotting', edit_method="", default="active_path_topic")
Publisherandsubscriber.add(name = 'active_path_publisher_queue_size', paramtype = 'int', level = 0, description = 'Queue size for publish path that is actively optimized in bundle adjustment for plotting', edit_method="", default=5, min=0)
Publisherandsubscriber.add(name = 'path_publisher_topic', paramtype = 'str', level = 0, description = 'Topic for publish whole path for plotting', edit_method="", default="path_topic")
Publisherandsubscriber.add(name = 'path_publisher_queue_size', paramtype = 'int', level = 0, description = 'Queue size for publish whole path for plotting', edit_method="", default=5, min=0)
Publisherandsubscriber.add(name = 'landmarks_publisher_topic', paramtype = 'str', level = 0, description = 'Topic for publish landmarks in global frame', edit_method="", default="landmarks_topic")
Publisherandsubscriber.add(name = 'landmarks_publisher_queue_size', paramtype = 'int', level = 0, description = 'Queue size for publish landmarks in global frame', edit_method="", default=5, min=0)
Publisherandsubscriber.add(name = 'planes_publisher_topic', paramtype = 'str', level = 0, description = 'Topic for publish estiamted local planes in global frame', edit_method="", default="planes_topic")
Publisherandsubscriber.add(name = 'planes_publisher_queue_size', paramtype = 'int', level = 0, description = 'Queue size for publish estiamted local planes in global frame', edit_method="", default=5, min=0)

exit(gen.generate('keyframe_bundle_adjustment_ros_tool', 'mono_lidar', 'MonoLidar'))
